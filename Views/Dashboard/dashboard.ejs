<!DOCTYPE html>
<html>
    <head>
        <title>Dashboard</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.css" integrity="sha512-0nkKORjFgcyxv3HbE4rzFUlENUMNqic/EzDIeYCgsKa/nwqr2B91Vu/tNAu4Q0cBuG4Xe/D1f/freEci/7GDRA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
        <link rel="stylesheet" href="../Dashboard/dashboard.styling.css">
    </head>
<body>
        <div id="welcome-container" class="d-flex justify-content-between align-items-center">
            <header id="welcome">
                <i id="house-icon" class="bi bi-house-door"></i>
                Welcome, <%= user.username %>!
            </header>
            <i id="logout-icon" class="bi bi-box-arrow-left"></i>
        </div>
        <h2>
            User Functions
        </h2>
        <div id="user-info">
            <div id="update-details" class="card">
                <div class="card-header">
                    Update Your Details
                </div>
                <div id="card-body" class="card-body d-flex flex-column justify-content-center align-items-center">
                    <form id="user-details-form">
                        <div id="form-field">
                            <label for="username">Username:</label>
                            <input type="text" class="form-control text-dark" id="username" name="username" placeholder="<%= user.username %>">
                            <div id="invalid-feedback" class="text-danger">

                            </div>
                        </div>
                        <div id="form-field">
                            <label for="email">Email:</label>
                            <input type="email" class="form-control text-dark" id="email" name="email" placeholder="<%= user.email %>">
                            <div id="invalid-feedback" class="text-danger">

                            </div>
                        </div>
                        <div id="form-field" class="form-field-password">
                            <label for="password">Password:</label>
                            <input type="password" class="form-control text-dark" id="password">
                            <i id="eye-icon" class="bi bi-eye-fill"></i>
                            <div id="invalid-feedback" class="text-danger">
                            </div>
                        </div>
                        <button id="user-details-button" class="btn btn-primary" type="button">Update Details</button>
                    </form>
                </div>
            </div>
            <div id="orders" class="card">
                <div class="card-header">
                    Your Orders
                </div>
                <div class="card-body">
                </div>
            </div>
        </div>
        <% if (user.is_admin) { %>
            <h2>
                Admin Functions
            </h2>
            <div id="admin-info">
                <div id="product-container">
                    <div id="create-product" class="card">
                        <div class="card-header">Create Product</div>
                        <div class="card-body">
                            <form id="create-product-form">
                                <div class="admin-form-field">
                                    <label for="product-name" class="form-label">Product Name</label>
                                    <input type="text" class="form-control" id="product-name" name="product-name">
                                </div>
                                <div class="admin-form-field">
                                    <label for="product-price" class="form-label">Price</label>
                                    <input type="number" step="0.1" min="0.1" class="form-control" id="product-price" name="product-price">
                                </div>
                                <div class="admin-form-field">
                                    <label for="product-description" class="form-label">Description</label>
                                    <textarea class="form-control" id="product-description" name="product-description" rows="3"></textarea>
                                </div>

                                <div id="admin-form-field-categories" class="admin-form-field">
                                    <label for="product-categories" class="form-label">Categories</label>
                                    <select class="form-control chosen-select" id="product-categories" name="product-categories" data-placeholder = "Choose Categories" multiple>
                                        <% categories.forEach(category => { %>
                                            <option value="<%= category.name %>"><%= category.name %></option>
                                        <% }); %>
                                    </select>
                                </div>
                            
                                <button type="button" class="btn btn-primary" id="create-product-button">Create Product</button>
                            </form>
                        </div>
                    </div>

                    <div id="create-product" class="card">
                        <div class="card-header">Create Product</div>
                        <div class="card-body">
                            <form id="create-product-form">
                                <div class="admin-form-field">
                                    <label for="product-name" class="form-label">Product Name</label>
                                    <input type="text" class="form-control" id="product-name" name="product-name">
                                </div>
                                <div class="admin-form-field">
                                    <label for="product-price" class="form-label">Price</label>
                                    <input type="number" step="0.1" min="0.1" class="form-control" id="product-price" name="product-price">
                                </div>
                                <div class="admin-form-field">
                                    <label for="product-description" class="form-label">Description</label>
                                    <textarea class="form-control" id="product-description" name="product-description" rows="3"></textarea>
                                </div>

                                <div id="admin-form-field-categories" class="admin-form-field">
                                    <label for="product-categories" class="form-label">Categories</label>
                                    <select class="form-control chosen-select" id="product-categories" name="product-categories" data-placeholder = "Choose Categories" multiple>
                                        <% categories.forEach(category => { %>
                                            <option value="<%= category.name %>"><%= category.name %></option>
                                        <% }); %>
                                    </select>
                                </div>
                            
                                <button type="button" class="btn btn-primary" id="create-product-button">Create Product</button>
                            </form>
                        </div>
                    </div>
                </div>
    
                <div id="category-container">
                    <div id="create-category" class="card">
                        <div class="card-header">Create Category</div>
                        <div class="card-body">
                            <form id="create-category-form">
                                <div class="admin-form-field">
                                    <label for="category-name" class="form-label">Category Name</label>
                                    <input type="text" class="form-control" id="create-category-input" name="category-name">
                                    <div id="invalid-feedback" class="text-danger">
                                    </div>
                                </div>
                                <button type="button" class="btn btn-primary" id="create-category-button">Create Category</button>
                            </form>
                        </div>
                    </div>
    
                    <div id="delete-category" class="card">
                        <div class="card-header">Delete Category</div>
                        <div class="card-body">
                            <form id="create-category-form">
                                <div class="admin-form-field">
                                    <label for="category-name" class="form-label">Category Name</label>
                                    <input type="text" class="form-control" id="delete-category-input" name="category-name">
                                    <div id="invalid-feedback" class="text-danger">
                                    </div>
                                </div>
                                <button type="button" class="btn btn-primary" id="delete-category-button">Delete Category</button>
                            </form>
                        </div>
                    </div>

                    <div id="update-category" class="card">
                        <div class="card-header">Update Category</div>
                        <div class="card-body">
                            <form id="update-category-form">
                                <select class="form-control chosen-select" id="update-product-categories" name="update-product-categories" data-placeholder = "Choose a Category">
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }); %>
                                </select>                                
                                <div class="admin-form-field">
                                    <label for="category-name" class="form-label">Updated Category Name</label>
                                    <input type="text" class="form-control" id="update-category-input" name="category-name">
                                    <div id="invalid-feedback" class="text-danger">
                                    </div>
                                </div>
                                <button type="button" class="btn btn-primary" id="update-category-button">Update Category</button>
                            </form>
                        </div>
                    </div>
                </div>
                
            </div>
        <% } %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.jquery.min.js" integrity="sha512-rMGGF4wg1R73ehtnxXBt5mbUfN9JUJwbk21KMlnLZDJh7BkPmeovBuddZCENJddHYYMkCh9hPFnPmS9sspki8g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        $(document).ready(() => {
            const house_icon = $("#house-icon");
            const logout_icon = $("#logout-icon");
            const username_input = $("#username");
            const email_input = $("#email");
            const password_input = $("#password");
            const user_details_button = $("#user-details-button");
            const eye_icon = $("#eye-icon");

            house_icon.on("click", () => {
                window.location.href = "/";
            });

            $(logout_icon).on("click", () => {
                const data = {
                    cookie_name: "jwt",
                }

                try{
                    const response = $.ajax({
                        url: '/dashboard', 
                        method: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        data: JSON.stringify(data),
                        success: function() {
                            window.location.href = '/';
                        }
                    });
                }
                catch(error) {
                    console.log("AJAX error:", error);
                }

            })

            const changeIcon = (input, icon) => {
                input.attr("type") === "password" 
                ? (input.attr("type","input"), icon.removeClass().addClass("bi bi-eye-slash-fill")) 
                : (input.attr("type","password"), icon.removeClass().addClass("bi bi-eye-fill"));
            }
            
            eye_icon.on("click", () => changeIcon(password_input, eye_icon));
            
            let user, users; 
            const getUser = async () => {
                await $.ajax({
                    url: '/dashboard/user', 
                    type: 'GET',
                    success: (data) => {
                        user = data;
                    },
                    error: (error) => {
                        console.log("Error fetching existing users", error);
                    }
                });
            }

            const getExistingUsers = async () => {
                await $.ajax({
                    url: '/users', 
                    type: 'GET',
                    success: (data) => {
                        users = data; 
                    },
                    error: (error) => {
                        console.log("Error fetching existing users", error);
                    }
                });
            }

            const checkExistingUser = async (user_email) => {
                await getExistingUsers();
                await getUser();
                for(let i = 0; i < users.length; i++) {
                    if(users[i].email === user_email && user.email != user_email) {
                        return true;
                    }
                }
                return false;
            }

            const validateEmail = (email) => {
                const email_regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
                return email_regex.test(email);
            };
            
            const validateUsername = (username) => {
                return username !== "";
            }

            const validatePassowrd = (password) => {
                return password !== "";
            }
            
            const showError = (element, error_message) => {
                element.addClass("is-invalid");
                const error_div = element.closest("div").siblings("#invalid-feedback").length === 0
                ? element.siblings("#invalid-feedback")
                : element.closest("div").siblings("#invalid-feedback");
                error_div.text(error_message);
            };
        
            const hideError = (element) => {
                element.removeClass("is-invalid");
                const error_div = element.closest("div").siblings("#invalid-feedback").length === 0
                ? element.siblings("#invalid-feedback")
                : element.closest("div").siblings("#invalid-feedback");
                error_div.text("");
            };
            
            const validateForm = async () => {
                let is_valid = true;
            
                if (!validateUsername(username_input.val().trim())) {
                    is_valid = false;
                    showError(username_input, "Username cannot be empty.");
                } else {
                    hideError(username_input);
                }

                if (!validateEmail(email_input.val())) {
                    is_valid = false;
                    showError(email_input, "Invalid email format.");
                } else if (await checkExistingUser(email_input.val())) {
                    is_valid = false;
                    hideError(email_input);
                    showError(email_input, "Email already in use");
                } else {
                    hideError(email_input);
                }

                if (!validatePassowrd(password_input.val().trim())) {
                    is_valid = false;
                    showError(password_input, "Password cannot be empty.");
                } else {
                    hideError(password_input);
                }
            
                return is_valid;
            };
            
            $("#username, #email, #password").on("input", (event) => {
                hideError($(event.target));
            });

            user_details_button.on("click",async (event) => {
                event.preventDefault();
                
                if(await validateForm()) {
                    try {
                        const email = $("#email").val();
                        const user = $.ajax({
                            url: `/users/${email}`,
                            type: 'GET',
                        });

                        if (user) {
                            const user_details_form_data = {
                                username: $("#username").val(),
                                email: $("#email").val(),
                                password: $("#password").val()
                            }
                        
                            const response = $.ajax({
                                url: '/dashboard/update-details', 
                                method: 'POST',
                                dataType: 'json',
                                contentType: 'application/json',
                                data: JSON.stringify(user_details_form_data)
                            });
                            console.log("Response:", response);
                        }
                    } 
                    catch (error) {
                        console.error("Error:", error);
                    }
                }
            });

            $(".chosen-select").chosen({
                no_results_text: "Oops, nothing found!"
            });

            $("ul.chosen-choices").on("click",() => {
                $("ul.chosen-choices").css("color", "var(--bs-body-color) !important");
                $("ul.chosen-choices").css("background-color", "var(--bs-body-bg) !important");
                $("ul.chosen-choices").css("border-color", "#86b7fe !important");
                $("ul.chosen-choices").css("outline", "0 !important");
                $("ul.chosen-choices").css("box-shadow", "0 0 0 .25rem rgba(13,110,253,.25) !important");
            })
            
            let categories;
            const getExistingCategories = async () => {
                await $.ajax({
                    url: '/categories/all', 
                    type: 'GET',
                    success: (data) => {
                        categories = data; 
                    },
                    error: (error) => {
                        console.log("Error fetching existing categories", error);
                    }
                });
            } 

            const checkExistingCategory = async (category_name) => {
                await getExistingCategories();
                for(let i = 0; i < categories.length; i++) {
                    if(categories[i].name === category_name) {
                        return true;
                    }
                }
                return false;
            }

            const containsSpecialCharacters = (str) => {
                const special_character_regex = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;
                return special_character_regex.test(str);
            }
            
            $("#create-category-button").on("click", async () => {
                const category_name = $("#create-category-input").val();
                if(!containsSpecialCharacters(category_name) && !(await checkExistingCategory(category_name))) {
                    try {
                        const response = await $.ajax({
                            url: '/categories',
                            method: 'POST',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ name: category_name }), 
                        });
                        if (response) {
                            hideError($("#create-category-input"));
                            
                            $("#product-categories, #update-product-categories").append(
                                `<option value="${response.name}">${response.name}</option>`
                            );
                        
                            $("#product-categories, #update-product-categories").trigger("chosen:updated");
                        
                            $("#create-category-input").val("");
                        } 
                        else {
                            console.error("Category creation failed.");
                        }
                    } 
                    catch (error) {
                        console.error("AJAX error:", error);
                    }
                }
                else {
                    showError($("#create-category-input"), "Category already exists or value contains special character")
                }
                
            });

            $("#delete-category-button").on("click", async () => {
                const category_name = $("#delete-category-input").val();
                if(!containsSpecialCharacters(category_name) && await checkExistingCategory(category_name)) {
                    try {
                        const response = await $.ajax({
                            url: `/categories/name/${category_name}`,
                            method: 'DELETE',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ name: category_name })
                        });
                        if (response) {
                            hideError($("#delete-category-input"));
                            console.log($(`option[value="${category_name}"]`))
                            $(`option[value="${category_name}"]`).remove();

                            $("#product-categories, #update-product-categories").trigger("chosen:updated");

                            $("#delete-category-input").val("");
                        } 
                        else {
                            console.error("Category deletion failed.");
                        }
                    } 
                    catch (error) {
                        console.error("AJAX error:", error);
                    }
                }
                else {
                    showError($("#delete-category-input"), "Category does not exist")
                }
            })

            $("#update-category-button").on("click", async () => {
                const category_name = $("#update-product-categories :selected").text();
                const updated_category_name = $("#update-category-input").val();
                if(!containsSpecialCharacters(updated_category_name) && !(await checkExistingCategory(updated_category_name))) {
                    try {
                        const response = await $.ajax({
                            url: `/categories/name/${category_name}`,
                            method: 'PUT',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ name: updated_category_name })
                        });
                        if (response) {
                            hideError($("#update-category-input"));

                            $(`option[value="${category_name}"]`).remove();

                            $("#product-categories, #update-product-categories").append(
                                `<option value="${updated_category_name}">${updated_category_name}</option>`
                            );

                            $("#product-categories, #update-product-categories").trigger("chosen:updated");

                            $("#update-category-input").val("");
                        } 
                        else {
                            console.error("Category update failed.");
                        }
                    } 
                    catch (error) {
                        console.error("AJAX error:", error);
                    }
                }
                else {
                    showError($("#update-category-input"), "Category already exists or value contains special character")
                }
            })

            $("#create-category-input, #delete-category-input, #update-category-input").on("input", (event) => {
                hideError($(event.target));
            });
        });
    </script>
</body>
</html>
