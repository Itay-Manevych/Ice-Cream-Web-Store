<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register Page</title>
    <link rel="stylesheet" type="text/css" href="../Login-Register/register.styling.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
</head>
<body>
    <div id="container" class="row d-flex justify-content-center align-items-center min-vh-100">
        <div class="card">
            <i id="house-icon" class="bi bi-house-door"></i>
            <div class="card-body d-flex flex-column justify-content-center align-items-center" style="margin-left: 2rem;">
                <h5 id="register-title" class="card-title text-center">
                    Create Your Account
                </h5>
                <form>
                    <div id="form-field">
                        <label for="username" class="form-label" style="color: rgb(242,132,189);">
                            Username:
                        </label>
                        <input type="username" name="username" id="input" class="form-control">
                        <div id="invalid-feedback" class="text-danger">

                        </div>
                    </div>
                    
                    <div id="form-field">
                        <label for="email" class="form-label" style="color: rgb(242,132,189);">
                            Email:
                        </label>
                        <input type="email" name="email" id="input" class="form-control">
                        <div id="invalid-feedback" class="text-danger">

                        </div>
                    </div>

                    <div id="form-field">
                        <label for="password" class="form-label" style="color: rgb(242,132,189);">
                            Password:
                        </label>
                        <div class="d-flex justify-content-center align-items-center">
                            <input type="password" name="password-input" id="password-input" class="form-control">
                            <i id="eye-icon" class="bi bi-eye-fill"></i>
                        </div>
                        <div id="invalid-feedback" class="text-danger">

                        </div>
                    </div>

                    <div id="form-field" class="d-flex flex-column align-items-start">
                        <label id="password-label" for="password" class="form-label" style="color: rgb(242,132,189);">
                            Repeat Password:
                        </label>
                        <div class="d-flex justify-content-center align-items-center">
                            <input type="password" name="password-input" id="password-input" class="form-control">
                            <i id="eye-icon" class="bi bi-eye-fill"></i>
                        </div>
                        <div id="invalid-feedback" class="text-danger">

                        </div>
                    </div>

                    <div id="generate-password" class="d-flex flex-row  justify-content-center align-items-center">
                        <button id="generate-password-button" class="btn btn-info" type="button">
                            Generate Secure Password
                        </button>
                    </div>
                    
                    <button class="btn" id="register-button">
                        Register
                    </button>

                    <p id="login-here" class="text-center">
                        Already have an account? 
                        <a href="/login"  class="link">
                            Login here
                        </a>
                    </p>
                </form>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
    <script>
        $(document).ready(() => {
            const username_input = $("#input[name='username']");
            const email_input = $("#input[name='email']");
            const password_input = $("#password-input");
            const repeat_password_input = $("[id=password-input]:eq(1)");
            const generate_password_button = $("#generate-password-button");
            const eye_icon = $("#eye-icon");
            const house_icon = $("#house-icon");
            const repeat_eye_icon = $("[id=eye-icon]:eq(1)");
            const register_button = $("#register-button");
            const form = $("form");

            const changeIcon = (input,icon) => {
                input.attr("type") === "password" 
                ? (input.attr("type","input"), icon.removeClass().addClass("bi bi-eye-slash-fill")) 
                : (input.attr("type","password"), icon.removeClass().addClass("bi bi-eye-fill"));
            }
            
            eye_icon.on("click", () => changeIcon(password_input,eye_icon));
            repeat_eye_icon.on("click", () => changeIcon(repeat_password_input,repeat_eye_icon));

            house_icon.on("click",() => {
                window.location.href = '/';
            })
            
            generate_password_button.on("click", (event) => {
                event.preventDefault();
                let password = "";
                const password_length = 12;
                const allowed_password_values = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                for (let i = 0; i < password_length; i++) {
                    let rand = Math.floor(
                        Math.random() * allowed_password_values.length
                    );
                    password += allowed_password_values.substring(rand,rand + 1);
                }
                password_input.val(password);
            })
            
            let users; 
            const getAllUsers = async () => {
                await $.ajax({
                    url: '/users', 
                    type: 'GET',
                    success: (data) => {
                        users = data; 
                    },
                    error: (error) => {
                        console.log("Error fetching existing users", error);
                    }
                });
            }

            const checkExistingUser = async (user_email) => {
                await getAllUsers();
                for(let i = 0; i < users.length; i++) {
                    if(users[i].email === user_email) {
                        return true;
                    }
                }
                return false;
            }

            const validateEmail = (email) => {
                const email_regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
                return email_regex.test(email);
            };
            
            const validateUsername = (username) => {
                return username !== "";
            }

            const validatePassowrd = (password) => {
                return password !== "";
            }

            const comparePasswords = (password1, password2) => {
                return password1 === password2;
            }
            
            const showError = (element, error_message) => {
                element.addClass("is-invalid");
                const error_div = element.closest("div").siblings("#invalid-feedback").length === 0
                ? element.siblings("#invalid-feedback")
                : element.closest("div").siblings("#invalid-feedback");
                error_div.text(error_message);
            };
        
            const hideError = (element) => {
                element.removeClass("is-invalid");
                const error_div = element.closest("div").siblings("#invalid-feedback").length === 0
                ? element.siblings("#invalid-feedback")
                : element.closest("div").siblings("#invalid-feedback");
                error_div.text("");
            };
        
            const validateForm = async () => {
                let is_valid = true;
            
                if (!validateUsername(username_input.val().trim())) {
                    is_valid = false;
                    showError(username_input, "Username cannot be empty.");
                }
                else if(username_input.val().length > 40) {
                    showError(username_input, "Username's length cannot be larger than 40 characters.");
                }
                else {
                    hideError(username_input);
                }

                if (!validateEmail(email_input.val())) {
                    is_valid = false;
                    showError(email_input, "Invalid email format.");
                } 
                else if (await checkExistingUser(email_input.val())) {
                    is_valid = false;
                    showError(email_input, "Email already in use");
                } 
                else {
                    hideError(email_input);
                }

                if (!validatePassowrd(password_input.val())) {
                    is_valid = false;
                    showError(password_input, "Password cannot be empty.");
                    
                } 
                else if (password_input.val().length < 4) {
                    is_valid = false;
                    showError(password_input, "Password length cannot be smaller than 4 characters.");
                }
                else {
                    hideError(password_input);
                }
            
                if (!validatePassowrd(repeat_password_input.val().trim()) || !comparePasswords(password_input.val().trim(), repeat_password_input.val().trim())) {
                    is_valid = false;
                    showError(repeat_password_input, "Passwords do not match.");
                } 
                else {
                    hideError(repeat_password_input);
                }
            
                return is_valid;
            };
            
            $("#input[name='username'], #input[name='email'], #password-input, #repeat-password-input").on("input", (event) => {
                hideError($(event.target));
            });

            register_button.on("click", async (event) => {
                event.preventDefault();
                
                if (await validateForm()) {
                    const form_data = {
                        username: username_input.val(),
                        email: email_input.val(), 
                        password: password_input.val(),
                        is_admin: false
                    }

                    await $.ajax({
                        url: '/users',
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/json',
                        data: JSON.stringify(form_data),
                        success: () => {
                            console.log("User registered successfully");
                            window.location.href = "/login";
                        },
                        error: (error) => {
                            console.log("Error registering a user",error);
                        }
                    });
                }
            });
        });
        </script>
</body>
</html>
